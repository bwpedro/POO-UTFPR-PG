/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Dados.Cliente;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import javax.swing.JOptionPane;

/**
 *
 * @author pedrowarmlingbotelho
 */
public class ClienteExcluir extends PadraoExcluir {

    ArrayList<Cliente> listaCliente;
    javax.swing.JDesktopPane Desktop;

    /**
     * Creates new form ClienteExcluir
     *
     * @param listaCliente
     * @param Desktop
     */
    public ClienteExcluir(ArrayList<Cliente> listaCliente, javax.swing.JDesktopPane Desktop) {
        this.listaCliente = listaCliente;
        this.Desktop = Desktop;
        bExcluir.setEnabled(false);
        initComponents();
    }

    public void limparTela() {
        tId.setText("");
        tNome.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelC = new javax.swing.JPanel();
        lNome = new javax.swing.JLabel();
        tNome = new javax.swing.JTextField();

        lNome.setText("Nome do Cliente:");

        javax.swing.GroupLayout painelCLayout = new javax.swing.GroupLayout(painelC);
        painelC.setLayout(painelCLayout);
        painelCLayout.setHorizontalGroup(
            painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lNome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tNome, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        painelCLayout.setVerticalGroup(
            painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lNome)
                    .addComponent(tNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        getContentPane().add(painelC, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lNome;
    private javax.swing.JPanel painelC;
    private javax.swing.JTextField tNome;
    // End of variables declaration//GEN-END:variables

    @Override
    public void bConfirmarActionPerformed(ActionEvent ae) {

        try {
            if (tId.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Código não informado", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                limparTela();
                bExcluir.setEnabled(false);
                return;
            } else {
                for (Cliente cliente : listaCliente) {
                    if (cliente.getId() == Integer.parseInt(tId.getText())) {
                        tNome.setText(cliente.getNome());
                        bExcluir.setEnabled(true);
                        return;
                    }
                }
            }

            if (!bExcluir.isEnabled()) {
                JOptionPane.showMessageDialog(this, "Cliente não cadastrado", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                limparTela();
                System.out.println("2");
                bExcluir.setEnabled(false);
            }
        } catch (NumberFormatException ee) {
            JOptionPane.showMessageDialog(this, "Informe um número no campo 'Identificação'", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
            limparTela();
            bExcluir.setEnabled(false);
        }
    }

    @Override
    public void bConsultarActionPerformed(ActionEvent ae) {
        ClienteMostrar telaMostrarCliente = new ClienteMostrar(listaCliente);
        telaMostrarCliente.setVisible(true);
        this.Desktop.add(telaMostrarCliente, 0);
    }

    @Override
    public void bExcluirActionPerformed(ActionEvent ae) {
        try {
            for (Cliente cliente : listaCliente) {
                if (cliente.getId() == Integer.parseInt(tId.getText())) {
                    if (JOptionPane.showConfirmDialog(this, "Confirma a exclusão de " + cliente.getNome() + "?") == JOptionPane.YES_OPTION) {
                        listaCliente.remove(cliente);
                        limparTela();
                        System.out.println("1");
                        return;
                    } else {
                        limparTela();
                        bExcluir.setEnabled(false);
                        System.out.println("2");
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Cliente não cadastrado", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                    limparTela();
                    bExcluir.setEnabled(false);
                    System.out.println("3");
                    return;
                }
            }
        } catch (ConcurrentModificationException e) {
            JOptionPane.showMessageDialog(null, "Cliente removido com sucesso!");
            limparTela();
            bExcluir.setEnabled(false);
        }
    }

    @Override
    public void bCancelarActionPerformed(ActionEvent ae) {
        this.dispose();
    }
}
