/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Dados.Cliente;
import Dados.Imovel;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import javax.swing.JOptionPane;

/**
 *
 * @author pedrowarmlingbotelho
 */
public class ImoveisExcluir extends PadraoExcluir {

    ArrayList<Imovel> listaImoveis;
    javax.swing.JDesktopPane Desktop;
    /**
     * Creates new form ImoveisExcluir
     */
    public ImoveisExcluir(ArrayList<Imovel> listaImoveis, javax.swing.JDesktopPane Desktop) {
        this.listaImoveis = listaImoveis;
        this.Desktop = Desktop;
        bExcluir.setEnabled(false);
        initComponents();
    }
    
    public void limparTela(){
        tId.setText("");
        tEndereco.setText("");
        tCidade.setText("");
        tUf.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelC = new javax.swing.JPanel();
        lEndereco = new javax.swing.JLabel();
        lCidade = new javax.swing.JLabel();
        lUf = new javax.swing.JLabel();
        tEndereco = new javax.swing.JTextField();
        tCidade = new javax.swing.JTextField();
        tUf = new javax.swing.JTextField();

        lEndereco.setText("Endereço do imóvel:");

        lCidade.setText("Cidade:");

        lUf.setText("UF:");

        javax.swing.GroupLayout painelCLayout = new javax.swing.GroupLayout(painelC);
        painelC.setLayout(painelCLayout);
        painelCLayout.setHorizontalGroup(
            painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelCLayout.createSequentialGroup()
                        .addComponent(lEndereco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addGroup(painelCLayout.createSequentialGroup()
                        .addComponent(lCidade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tCidade)
                        .addGap(18, 18, 18)
                        .addComponent(lUf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tUf, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))))
        );
        painelCLayout.setVerticalGroup(
            painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lEndereco)
                    .addComponent(tEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lCidade)
                    .addComponent(lUf)
                    .addComponent(tCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tUf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        getContentPane().add(painelC, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lCidade;
    private javax.swing.JLabel lEndereco;
    private javax.swing.JLabel lUf;
    private javax.swing.JPanel painelC;
    private javax.swing.JTextField tCidade;
    private javax.swing.JTextField tEndereco;
    private javax.swing.JTextField tUf;
    // End of variables declaration//GEN-END:variables

    @Override
    public void bConfirmarActionPerformed(ActionEvent ae) {
        try {
            if (tId.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Código não informado", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                limparTela();
                bExcluir.setEnabled(false);
                return;
            } else {
                for (Imovel imoveis : listaImoveis) {
                    if (imoveis.getId() == Integer.parseInt(tId.getText())) {
                        tEndereco.setText(imoveis.getEndereco());
                        tCidade.setText(imoveis.getCidade());
                        tUf.setText(imoveis.getUf());
                        bExcluir.setEnabled(true);
                    } else {
                        JOptionPane.showMessageDialog(this, "Imóvel não cadastrado", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                        limparTela();
                        bExcluir.setEnabled(false);
                        return;
                    }
                }
            }

            if (!bExcluir.isEnabled()) {
                JOptionPane.showMessageDialog(this, "Imóvel não cadastrado", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                limparTela();
                bExcluir.setEnabled(false);
            }
        } catch (NumberFormatException ee) {
            JOptionPane.showMessageDialog(this, "Informe um número no campo 'Identificação'", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
            limparTela();
            bExcluir.setEnabled(false);
        }
    }
    
    @Override
    public void bConsultarActionPerformed(ActionEvent ae) {
        ImoveisMostrar telaMostrarImoveis = new ImoveisMostrar(listaImoveis);
        telaMostrarImoveis.setVisible(true);
        this.Desktop.add(telaMostrarImoveis,0);
    }

    @Override
    public void bExcluirActionPerformed(ActionEvent ae) {
        try {
            for (Imovel imoveis : listaImoveis) {
                if (imoveis.getId() == Integer.parseInt(tId.getText())) {
                    if (JOptionPane.showConfirmDialog(this, "Confirma a exclusão de " + imoveis.getEndereco()+ "?") == JOptionPane.YES_OPTION) {
                        listaImoveis.remove(imoveis);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Imóvel não cadastrado", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                }
            }
            limparTela();
            bExcluir.setEnabled(false);
        } catch (ConcurrentModificationException e) {
            JOptionPane.showMessageDialog(null, "Imóvel removido com sucesso!");
            limparTela();
            bExcluir.setEnabled(false);
        }
    }

    @Override
    public void bCancelarActionPerformed(ActionEvent ae) {
        this.dispose();
    }
}
