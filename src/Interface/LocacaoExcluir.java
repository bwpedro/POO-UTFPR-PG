/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Dados.Cliente;
import Dados.Imovel;
import Dados.Locacao;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import javax.swing.JOptionPane;

/**
 *
 * @author pedrowarmlingbotelho
 */
public class LocacaoExcluir extends PadraoExcluir {

    ArrayList<Locacao> listaLocacao;
    javax.swing.JDesktopPane Desktop;
    /**
     * Creates new form LocacaoExcluir
     * @param listaLocacao
     * @param Desktop
     */
    public LocacaoExcluir(ArrayList<Locacao> listaLocacao, javax.swing.JDesktopPane Desktop) {
        this.listaLocacao = listaLocacao;
        this.Desktop = Desktop;
        bExcluir.setEnabled(false);
        initComponents();
    }
    
    public void limparTela(){
        tId.setText("");
        tIdCliente.setText("");
        tIdImovel.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelC = new javax.swing.JPanel();
        lIdCliente = new javax.swing.JLabel();
        lIdImovel = new javax.swing.JLabel();
        tIdCliente = new javax.swing.JTextField();
        tIdImovel = new javax.swing.JTextField();

        lIdCliente.setText("ID do Cliente:");

        lIdImovel.setText("ID do Imóvel:");

        javax.swing.GroupLayout painelCLayout = new javax.swing.GroupLayout(painelC);
        painelC.setLayout(painelCLayout);
        painelCLayout.setHorizontalGroup(
            painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lIdImovel)
                    .addComponent(lIdCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tIdCliente)
                    .addComponent(tIdImovel, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        painelCLayout.setVerticalGroup(
            painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lIdCliente)
                    .addComponent(tIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(painelCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lIdImovel)
                    .addComponent(tIdImovel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        getContentPane().add(painelC, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lIdCliente;
    private javax.swing.JLabel lIdImovel;
    private javax.swing.JPanel painelC;
    private javax.swing.JTextField tIdCliente;
    private javax.swing.JTextField tIdImovel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void bConfirmarActionPerformed(ActionEvent ae) {
        
        // try catch se o usuario não informou um número no campo ID
        
        try {
            if (tId.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Código não informado", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                limparTela();
                bExcluir.setEnabled(false);
                return;
            } else {
                for (Locacao locacao : listaLocacao) {
                    if (locacao.getId() == Integer.parseInt(tId.getText())) {
                        tIdCliente.setText(locacao.getIdCliente());
                        tIdImovel.setText(locacao.getIdImovel());
                        bExcluir.setEnabled(true);
                        tId.setEditable(false);
                        return;
                    }
                }
            }

            if (!bExcluir.isEnabled()) {
                JOptionPane.showMessageDialog(this, "Locação não cadastrada", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                limparTela();
                bExcluir.setEnabled(false);
            }
            
        } catch (NumberFormatException ee) {
            JOptionPane.showMessageDialog(this, "Informe um número no campo 'Identificação'", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
            limparTela();
            bExcluir.setEnabled(false);
        }
    }
    
    @Override
    public void bConsultarActionPerformed(ActionEvent ae) {
        Relatorio telaMostrarLocacao = new Relatorio(listaLocacao);
        telaMostrarLocacao.setVisible(true);
        this.Desktop.add(telaMostrarLocacao,0);
    }

    @Override
    public void bExcluirActionPerformed(ActionEvent ae) {
        try {
            for (Locacao locacao : listaLocacao) {
                if (locacao.getId() == Integer.parseInt(tId.getText())) {
                    if (JOptionPane.showConfirmDialog(this, "Confirma a exclusão de " + locacao.getId()+ "?") == JOptionPane.YES_OPTION) {
                        listaLocacao.remove(locacao);
                        limparTela();
                        tId.setEditable(true);
                    } else {
                        limparTela();
                        return;
                    }
                }
            }
            
            if (!bExcluir.isEnabled()) {
                JOptionPane.showMessageDialog(this, "Locação não cadastrada", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                limparTela();
                bExcluir.setEnabled(false);
            }
            
        } catch (ConcurrentModificationException e) {
            JOptionPane.showMessageDialog(null, "Locação removida com sucesso!");
            limparTela();
            bExcluir.setEnabled(false);
        }
    }

    @Override
    public void bCancelarActionPerformed(ActionEvent ae) {
        this.dispose();
    }
}
